Disable range checks; we're running in userspace.

diff -r 4a00917c4d5f linux-2.6.26/include/asm-x86/uaccess_64.h
--- a/linux-2.6.26/include/asm-x86/uaccess_64.h	Thu Aug 07 23:57:46 2008 +0200
+++ b/linux-2.6.26/include/asm-x86/uaccess_64.h	Sat Aug 09 17:49:46 2008 -0700
@@ -49,8 +49,11 @@
 	flag;								\
 })
 
+#ifdef CONFIG_NSC
+#define access_ok(type, addr, size) (1)
+#else
 #define access_ok(type, addr, size) (__range_not_ok(addr, size) == 0)
-
+#endif
 /*
  * The exception table consists of pairs of addresses: the first is the
  * address of an instruction that is allowed to fault, and the second is
@@ -93,6 +96,9 @@ extern int fixup_exception(struct pt_reg
 		     : "c" (ptr)		      \
 		     : "r8")
 
+#ifdef CONFIG_NSC
+#define get_user(x,ptr) ({ (x) = *ptr; 0; })
+#else
 /* Careful: we have to cast the result to the type of the pointer
  * for sign reasons */
 
@@ -121,7 +127,7 @@ extern int fixup_exception(struct pt_reg
 	(x) = (__force typeof(*(ptr)))__val_gu;				\
 	__ret_gu;							\
 })
-
+#endif
 extern void __put_user_1(void);
 extern void __put_user_2(void);
 extern void __put_user_4(void);
@@ -134,8 +140,12 @@ extern void __put_user_bad(void);
 		     :"c" (ptr),"d" (x)					\
 		     :"r8")
 
+#ifdef CONFIG_NSC
+#define put_user(x,ptr) ({ *(ptr) = x; 0;})
+#else
 #define put_user(x, ptr)						\
 	__put_user_check((__typeof__(*(ptr)))(x), (ptr), sizeof(*(ptr)))
+#endif
 
 #define __get_user(x, ptr)						\
 	__get_user_nocheck((x), (ptr), sizeof(*(ptr)))
