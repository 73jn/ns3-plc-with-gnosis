/* This file was generated by PyBindGen 0.15.0.809 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;


#include "ns3/wifi-module.h"
#include "ns3/propagation-module.h"
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject *_PyNs3Address_Type;
#define PyNs3Address_Type (*_PyNs3Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;
#define PyNs3Address_wrapper_registry (*_PyNs3Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelper;


extern PyTypeObject *_PyNs3AsciiTraceHelper_Type;
#define PyNs3AsciiTraceHelper_Type (*_PyNs3AsciiTraceHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelper_wrapper_registry;
#define PyNs3AsciiTraceHelper_wrapper_registry (*_PyNs3AsciiTraceHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForDevice;


extern PyTypeObject *_PyNs3AsciiTraceHelperForDevice_Type;
#define PyNs3AsciiTraceHelperForDevice_Type (*_PyNs3AsciiTraceHelperForDevice_Type)

class PyNs3AsciiTraceHelperForDevice__PythonHelper : public ns3::AsciiTraceHelperForDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelperForDevice_wrapper_registry;
#define PyNs3AsciiTraceHelperForDevice_wrapper_registry (*_PyNs3AsciiTraceHelperForDevice_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject *_PyNs3Buffer_Type;
#define PyNs3Buffer_Type (*_PyNs3Buffer_Type)

extern std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;
#define PyNs3Buffer_wrapper_registry (*_PyNs3Buffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject *_PyNs3BufferIterator_Type;
#define PyNs3BufferIterator_Type (*_PyNs3BufferIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;
#define PyNs3BufferIterator_wrapper_registry (*_PyNs3BufferIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject *_PyNs3ByteTagIterator_Type;
#define PyNs3ByteTagIterator_Type (*_PyNs3ByteTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;
#define PyNs3ByteTagIterator_wrapper_registry (*_PyNs3ByteTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
#define PyNs3ByteTagIteratorItem_Type (*_PyNs3ByteTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;
#define PyNs3ByteTagIteratorItem_wrapper_registry (*_PyNs3ByteTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject *_PyNs3ByteTagList_Type;
#define PyNs3ByteTagList_Type (*_PyNs3ByteTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;
#define PyNs3ByteTagList_wrapper_registry (*_PyNs3ByteTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject *_PyNs3ByteTagListIterator_Type;
#define PyNs3ByteTagListIterator_Type (*_PyNs3ByteTagListIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;
#define PyNs3ByteTagListIterator_wrapper_registry (*_PyNs3ByteTagListIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
#define PyNs3ByteTagListIteratorItem_Type (*_PyNs3ByteTagListIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;
#define PyNs3ByteTagListIteratorItem_wrapper_registry (*_PyNs3ByteTagListIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject *_PyNs3Ipv4Address_Type;
#define PyNs3Ipv4Address_Type (*_PyNs3Ipv4Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;
#define PyNs3Ipv4Address_wrapper_registry (*_PyNs3Ipv4Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject *_PyNs3Ipv4Mask_Type;
#define PyNs3Ipv4Mask_Type (*_PyNs3Ipv4Mask_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;
#define PyNs3Ipv4Mask_wrapper_registry (*_PyNs3Ipv4Mask_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject *_PyNs3Ipv6Address_Type;
#define PyNs3Ipv6Address_Type (*_PyNs3Ipv6Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;
#define PyNs3Ipv6Address_wrapper_registry (*_PyNs3Ipv6Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject *_PyNs3Ipv6Prefix_Type;
#define PyNs3Ipv6Prefix_Type (*_PyNs3Ipv6Prefix_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;
#define PyNs3Ipv6Prefix_wrapper_registry (*_PyNs3Ipv6Prefix_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac48Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48Address;


extern PyTypeObject *_PyNs3Mac48Address_Type;
#define PyNs3Mac48Address_Type (*_PyNs3Mac48Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;
#define PyNs3Mac48Address_wrapper_registry (*_PyNs3Mac48Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NetDeviceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceContainer;


extern PyTypeObject *_PyNs3NetDeviceContainer_Type;
#define PyNs3NetDeviceContainer_Type (*_PyNs3NetDeviceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;
#define PyNs3NetDeviceContainer_wrapper_registry (*_PyNs3NetDeviceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject *_PyNs3PacketMetadata_Type;
#define PyNs3PacketMetadata_Type (*_PyNs3PacketMetadata_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;
#define PyNs3PacketMetadata_wrapper_registry (*_PyNs3PacketMetadata_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject *_PyNs3PacketMetadataItem_Type;
#define PyNs3PacketMetadataItem_Type (*_PyNs3PacketMetadataItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;
#define PyNs3PacketMetadataItem_wrapper_registry (*_PyNs3PacketMetadataItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
#define PyNs3PacketMetadataItemIterator_Type (*_PyNs3PacketMetadataItemIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;
#define PyNs3PacketMetadataItemIterator_wrapper_registry (*_PyNs3PacketMetadataItemIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject *_PyNs3PacketTagIterator_Type;
#define PyNs3PacketTagIterator_Type (*_PyNs3PacketTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;
#define PyNs3PacketTagIterator_wrapper_registry (*_PyNs3PacketTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
#define PyNs3PacketTagIteratorItem_Type (*_PyNs3PacketTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;
#define PyNs3PacketTagIteratorItem_wrapper_registry (*_PyNs3PacketTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject *_PyNs3PacketTagList_Type;
#define PyNs3PacketTagList_Type (*_PyNs3PacketTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;
#define PyNs3PacketTagList_wrapper_registry (*_PyNs3PacketTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject *_PyNs3PacketTagListTagData_Type;
#define PyNs3PacketTagListTagData_Type (*_PyNs3PacketTagListTagData_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;
#define PyNs3PacketTagListTagData_wrapper_registry (*_PyNs3PacketTagListTagData_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapFile *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFile;


extern PyTypeObject *_PyNs3PcapFile_Type;
#define PyNs3PcapFile_Type (*_PyNs3PcapFile_Type)

extern std::map<void*, PyObject*> *_PyNs3PcapFile_wrapper_registry;
#define PyNs3PcapFile_wrapper_registry (*_PyNs3PcapFile_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelper;


extern PyTypeObject *_PyNs3PcapHelper_Type;
#define PyNs3PcapHelper_Type (*_PyNs3PcapHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3PcapHelper_wrapper_registry;
#define PyNs3PcapHelper_wrapper_registry (*_PyNs3PcapHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForDevice;


extern PyTypeObject *_PyNs3PcapHelperForDevice_Type;
#define PyNs3PcapHelperForDevice_Type (*_PyNs3PcapHelperForDevice_Type)

class PyNs3PcapHelperForDevice__PythonHelper : public ns3::PcapHelperForDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3PcapHelperForDevice_wrapper_registry;
#define PyNs3PcapHelperForDevice_wrapper_registry (*_PyNs3PcapHelperForDevice_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PropagationCache< ns3::JakesProcess > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationCache__Ns3JakesProcess;


extern PyTypeObject *_PyNs3PropagationCache__Ns3JakesProcess_Type;
#define PyNs3PropagationCache__Ns3JakesProcess_Type (*_PyNs3PropagationCache__Ns3JakesProcess_Type)

extern std::map<void*, PyObject*> *_PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry;
#define PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry (*_PyNs3PropagationCache__Ns3JakesProcess_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject *_PyNs3Simulator_Type;
#define PyNs3Simulator_Type (*_PyNs3Simulator_Type)

extern std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;
#define PyNs3Simulator_wrapper_registry (*_PyNs3Simulator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject *_PyNs3Tag_Type;
#define PyNs3Tag_Type (*_PyNs3Tag_Type)


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject *_PyNs3TagBuffer_Type;
#define PyNs3TagBuffer_Type (*_PyNs3TagBuffer_Type)

extern std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;
#define PyNs3TagBuffer_wrapper_registry (*_PyNs3TagBuffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject *_PyNs3Vector2D_Type;
#define PyNs3Vector2D_Type (*_PyNs3Vector2D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;
#define PyNs3Vector2D_wrapper_registry (*_PyNs3Vector2D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject *_PyNs3Vector3D_Type;
#define PyNs3Vector3D_Type (*_PyNs3Vector3D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;
#define PyNs3Vector3D_wrapper_registry (*_PyNs3Vector3D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject *_PyNs3Chunk_Type;
#define PyNs3Chunk_Type (*_PyNs3Chunk_Type)


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject *_PyNs3Header_Type;
#define PyNs3Header_Type (*_PyNs3Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapFileWrapper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFileWrapper;


extern PyTypeObject *_PyNs3PcapFileWrapper_Type;
#define PyNs3PcapFileWrapper_Type (*_PyNs3PcapFileWrapper_Type)


typedef struct {
    PyObject_HEAD
    ns3::PropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationDelayModel;


extern PyTypeObject *_PyNs3PropagationDelayModel_Type;
#define PyNs3PropagationDelayModel_Type (*_PyNs3PropagationDelayModel_Type)

class PyNs3PropagationDelayModel__PythonHelper : public ns3::PropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationLossModel;


extern PyTypeObject *_PyNs3PropagationLossModel_Type;
#define PyNs3PropagationLossModel_Type (*_PyNs3PropagationLossModel_Type)

class PyNs3PropagationLossModel__PythonHelper : public ns3::PropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationDelayModel;


extern PyTypeObject *_PyNs3RandomPropagationDelayModel_Type;
#define PyNs3RandomPropagationDelayModel_Type (*_PyNs3RandomPropagationDelayModel_Type)

class PyNs3RandomPropagationDelayModel__PythonHelper : public ns3::RandomPropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationLossModel;


extern PyTypeObject *_PyNs3RandomPropagationLossModel_Type;
#define PyNs3RandomPropagationLossModel_Type (*_PyNs3RandomPropagationLossModel_Type)

class PyNs3RandomPropagationLossModel__PythonHelper : public ns3::RandomPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableStream *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableStream;


extern PyTypeObject *_PyNs3RandomVariableStream_Type;
#define PyNs3RandomVariableStream_Type (*_PyNs3RandomVariableStream_Type)

class PyNs3RandomVariableStream__PythonHelper : public ns3::RandomVariableStream
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomVariableStream__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RangePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RangePropagationLossModel;


extern PyTypeObject *_PyNs3RangePropagationLossModel_Type;
#define PyNs3RangePropagationLossModel_Type (*_PyNs3RangePropagationLossModel_Type)

class PyNs3RangePropagationLossModel__PythonHelper : public ns3::RangePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RangePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SequentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialRandomVariable;


extern PyTypeObject *_PyNs3SequentialRandomVariable_Type;
#define PyNs3SequentialRandomVariable_Type (*_PyNs3SequentialRandomVariable_Type)

class PyNs3SequentialRandomVariable__PythonHelper : public ns3::SequentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SequentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::ThreeLogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeLogDistancePropagationLossModel;


extern PyTypeObject *_PyNs3ThreeLogDistancePropagationLossModel_Type;
#define PyNs3ThreeLogDistancePropagationLossModel_Type (*_PyNs3ThreeLogDistancePropagationLossModel_Type)

class PyNs3ThreeLogDistancePropagationLossModel__PythonHelper : public ns3::ThreeLogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeLogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject *_PyNs3Trailer_Type;
#define PyNs3Trailer_Type (*_PyNs3Trailer_Type)


typedef struct {
    PyObject_HEAD
    ns3::TriangularRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularRandomVariable;


extern PyTypeObject *_PyNs3TriangularRandomVariable_Type;
#define PyNs3TriangularRandomVariable_Type (*_PyNs3TriangularRandomVariable_Type)

class PyNs3TriangularRandomVariable__PythonHelper : public ns3::TriangularRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TriangularRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::TwoRayGroundPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TwoRayGroundPropagationLossModel;


extern PyTypeObject *_PyNs3TwoRayGroundPropagationLossModel_Type;
#define PyNs3TwoRayGroundPropagationLossModel_Type (*_PyNs3TwoRayGroundPropagationLossModel_Type)

class PyNs3TwoRayGroundPropagationLossModel__PythonHelper : public ns3::TwoRayGroundPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TwoRayGroundPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UniformRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformRandomVariable;


extern PyTypeObject *_PyNs3UniformRandomVariable_Type;
#define PyNs3UniformRandomVariable_Type (*_PyNs3UniformRandomVariable_Type)

class PyNs3UniformRandomVariable__PythonHelper : public ns3::UniformRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UniformRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WeibullRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullRandomVariable;


extern PyTypeObject *_PyNs3WeibullRandomVariable_Type;
#define PyNs3WeibullRandomVariable_Type (*_PyNs3WeibullRandomVariable_Type)

class PyNs3WeibullRandomVariable__PythonHelper : public ns3::WeibullRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WeibullRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZetaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaRandomVariable;


extern PyTypeObject *_PyNs3ZetaRandomVariable_Type;
#define PyNs3ZetaRandomVariable_Type (*_PyNs3ZetaRandomVariable_Type)

class PyNs3ZetaRandomVariable__PythonHelper : public ns3::ZetaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZetaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZipfRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfRandomVariable;


extern PyTypeObject *_PyNs3ZipfRandomVariable_Type;
#define PyNs3ZipfRandomVariable_Type (*_PyNs3ZipfRandomVariable_Type)

class PyNs3ZipfRandomVariable__PythonHelper : public ns3::ZipfRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZipfRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Channel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Channel;


extern PyTypeObject *_PyNs3Channel_Type;
#define PyNs3Channel_Type (*_PyNs3Channel_Type)

class PyNs3Channel__PythonHelper : public ns3::Channel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Channel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRandomVariable;


extern PyTypeObject *_PyNs3ConstantRandomVariable_Type;
#define PyNs3ConstantRandomVariable_Type (*_PyNs3ConstantRandomVariable_Type)

class PyNs3ConstantRandomVariable__PythonHelper : public ns3::ConstantRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantSpeedPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantSpeedPropagationDelayModel;


extern PyTypeObject *_PyNs3ConstantSpeedPropagationDelayModel_Type;
#define PyNs3ConstantSpeedPropagationDelayModel_Type (*_PyNs3ConstantSpeedPropagationDelayModel_Type)

class PyNs3ConstantSpeedPropagationDelayModel__PythonHelper : public ns3::ConstantSpeedPropagationDelayModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantSpeedPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Cost231PropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Cost231PropagationLossModel;


extern PyTypeObject *_PyNs3Cost231PropagationLossModel_Type;
#define PyNs3Cost231PropagationLossModel_Type (*_PyNs3Cost231PropagationLossModel_Type)

class PyNs3Cost231PropagationLossModel__PythonHelper : public ns3::Cost231PropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Cost231PropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DeterministicRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicRandomVariable;


extern PyTypeObject *_PyNs3DeterministicRandomVariable_Type;
#define PyNs3DeterministicRandomVariable_Type (*_PyNs3DeterministicRandomVariable_Type)

class PyNs3DeterministicRandomVariable__PythonHelper : public ns3::DeterministicRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeterministicRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject *_PyNs3DoubleValue_Type;
#define PyNs3DoubleValue_Type (*_PyNs3DoubleValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalRandomVariable;


extern PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;
#define PyNs3EmpiricalRandomVariable_Type (*_PyNs3EmpiricalRandomVariable_Type)

class PyNs3EmpiricalRandomVariable__PythonHelper : public ns3::EmpiricalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EmpiricalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ErlangRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangRandomVariable;


extern PyTypeObject *_PyNs3ErlangRandomVariable_Type;
#define PyNs3ErlangRandomVariable_Type (*_PyNs3ErlangRandomVariable_Type)

class PyNs3ErlangRandomVariable__PythonHelper : public ns3::ErlangRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErlangRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::ExponentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialRandomVariable;


extern PyTypeObject *_PyNs3ExponentialRandomVariable_Type;
#define PyNs3ExponentialRandomVariable_Type (*_PyNs3ExponentialRandomVariable_Type)

class PyNs3ExponentialRandomVariable__PythonHelper : public ns3::ExponentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ExponentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::FixedRssLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FixedRssLossModel;


extern PyTypeObject *_PyNs3FixedRssLossModel_Type;
#define PyNs3FixedRssLossModel_Type (*_PyNs3FixedRssLossModel_Type)

class PyNs3FixedRssLossModel__PythonHelper : public ns3::FixedRssLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FixedRssLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::FriisPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FriisPropagationLossModel;


extern PyTypeObject *_PyNs3FriisPropagationLossModel_Type;
#define PyNs3FriisPropagationLossModel_Type (*_PyNs3FriisPropagationLossModel_Type)

class PyNs3FriisPropagationLossModel__PythonHelper : public ns3::FriisPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FriisPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::GammaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaRandomVariable;


extern PyTypeObject *_PyNs3GammaRandomVariable_Type;
#define PyNs3GammaRandomVariable_Type (*_PyNs3GammaRandomVariable_Type)

class PyNs3GammaRandomVariable__PythonHelper : public ns3::GammaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GammaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject *_PyNs3Ipv4AddressChecker_Type;
#define PyNs3Ipv4AddressChecker_Type (*_PyNs3Ipv4AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject *_PyNs3Ipv4AddressValue_Type;
#define PyNs3Ipv4AddressValue_Type (*_PyNs3Ipv4AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject *_PyNs3Ipv4MaskChecker_Type;
#define PyNs3Ipv4MaskChecker_Type (*_PyNs3Ipv4MaskChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject *_PyNs3Ipv4MaskValue_Type;
#define PyNs3Ipv4MaskValue_Type (*_PyNs3Ipv4MaskValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject *_PyNs3Ipv6AddressChecker_Type;
#define PyNs3Ipv6AddressChecker_Type (*_PyNs3Ipv6AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject *_PyNs3Ipv6AddressValue_Type;
#define PyNs3Ipv6AddressValue_Type (*_PyNs3Ipv6AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;
#define PyNs3Ipv6PrefixChecker_Type (*_PyNs3Ipv6PrefixChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject *_PyNs3Ipv6PrefixValue_Type;
#define PyNs3Ipv6PrefixValue_Type (*_PyNs3Ipv6PrefixValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ItuR1411LosPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ItuR1411LosPropagationLossModel;


extern PyTypeObject *_PyNs3ItuR1411LosPropagationLossModel_Type;
#define PyNs3ItuR1411LosPropagationLossModel_Type (*_PyNs3ItuR1411LosPropagationLossModel_Type)

class PyNs3ItuR1411LosPropagationLossModel__PythonHelper : public ns3::ItuR1411LosPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ItuR1411LosPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ItuR1411NlosOverRooftopPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ItuR1411NlosOverRooftopPropagationLossModel;


extern PyTypeObject *_PyNs3ItuR1411NlosOverRooftopPropagationLossModel_Type;
#define PyNs3ItuR1411NlosOverRooftopPropagationLossModel_Type (*_PyNs3ItuR1411NlosOverRooftopPropagationLossModel_Type)

class PyNs3ItuR1411NlosOverRooftopPropagationLossModel__PythonHelper : public ns3::ItuR1411NlosOverRooftopPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ItuR1411NlosOverRooftopPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::JakesProcess *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3JakesProcess;


extern PyTypeObject *_PyNs3JakesProcess_Type;
#define PyNs3JakesProcess_Type (*_PyNs3JakesProcess_Type)

class PyNs3JakesProcess__PythonHelper : public ns3::JakesProcess
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3JakesProcess__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::JakesPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3JakesPropagationLossModel;


extern PyTypeObject *_PyNs3JakesPropagationLossModel_Type;
#define PyNs3JakesPropagationLossModel_Type (*_PyNs3JakesPropagationLossModel_Type)

class PyNs3JakesPropagationLossModel__PythonHelper : public ns3::JakesPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3JakesPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Kun2600MhzPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Kun2600MhzPropagationLossModel;


extern PyTypeObject *_PyNs3Kun2600MhzPropagationLossModel_Type;
#define PyNs3Kun2600MhzPropagationLossModel_Type (*_PyNs3Kun2600MhzPropagationLossModel_Type)

class PyNs3Kun2600MhzPropagationLossModel__PythonHelper : public ns3::Kun2600MhzPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Kun2600MhzPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogDistancePropagationLossModel;


extern PyTypeObject *_PyNs3LogDistancePropagationLossModel_Type;
#define PyNs3LogDistancePropagationLossModel_Type (*_PyNs3LogDistancePropagationLossModel_Type)

class PyNs3LogDistancePropagationLossModel__PythonHelper : public ns3::LogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::LogNormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalRandomVariable;


extern PyTypeObject *_PyNs3LogNormalRandomVariable_Type;
#define PyNs3LogNormalRandomVariable_Type (*_PyNs3LogNormalRandomVariable_Type)

class PyNs3LogNormalRandomVariable__PythonHelper : public ns3::LogNormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogNormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressChecker;


extern PyTypeObject *_PyNs3Mac48AddressChecker_Type;
#define PyNs3Mac48AddressChecker_Type (*_PyNs3Mac48AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressValue;


extern PyTypeObject *_PyNs3Mac48AddressValue_Type;
#define PyNs3Mac48AddressValue_Type (*_PyNs3Mac48AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::MatrixPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MatrixPropagationLossModel;


extern PyTypeObject *_PyNs3MatrixPropagationLossModel_Type;
#define PyNs3MatrixPropagationLossModel_Type (*_PyNs3MatrixPropagationLossModel_Type)

class PyNs3MatrixPropagationLossModel__PythonHelper : public ns3::MatrixPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MatrixPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::MobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityModel;


extern PyTypeObject *_PyNs3MobilityModel_Type;
#define PyNs3MobilityModel_Type (*_PyNs3MobilityModel_Type)

class PyNs3MobilityModel__PythonHelper : public ns3::MobilityModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NakagamiPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NakagamiPropagationLossModel;


extern PyTypeObject *_PyNs3NakagamiPropagationLossModel_Type;
#define PyNs3NakagamiPropagationLossModel_Type (*_PyNs3NakagamiPropagationLossModel_Type)

class PyNs3NakagamiPropagationLossModel__PythonHelper : public ns3::NakagamiPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NakagamiPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject *_PyNs3NetDevice_Type;
#define PyNs3NetDevice_Type (*_PyNs3NetDevice_Type)

class PyNs3NetDevice__PythonHelper : public ns3::NetDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject *_PyNs3NixVector_Type;
#define PyNs3NixVector_Type (*_PyNs3NixVector_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalRandomVariable;


extern PyTypeObject *_PyNs3NormalRandomVariable_Type;
#define PyNs3NormalRandomVariable_Type (*_PyNs3NormalRandomVariable_Type)

class PyNs3NormalRandomVariable__PythonHelper : public ns3::NormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::OkumuraHataPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OkumuraHataPropagationLossModel;


extern PyTypeObject *_PyNs3OkumuraHataPropagationLossModel_Type;
#define PyNs3OkumuraHataPropagationLossModel_Type (*_PyNs3OkumuraHataPropagationLossModel_Type)

class PyNs3OkumuraHataPropagationLossModel__PythonHelper : public ns3::OkumuraHataPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OkumuraHataPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::OutputStreamWrapper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OutputStreamWrapper;


extern PyTypeObject *_PyNs3OutputStreamWrapper_Type;
#define PyNs3OutputStreamWrapper_Type (*_PyNs3OutputStreamWrapper_Type)


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject *_PyNs3Packet_Type;
#define PyNs3Packet_Type (*_PyNs3Packet_Type)


typedef struct {
    PyObject_HEAD
    ns3::ParetoRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoRandomVariable;


extern PyTypeObject *_PyNs3ParetoRandomVariable_Type;
#define PyNs3ParetoRandomVariable_Type (*_PyNs3ParetoRandomVariable_Type)

class PyNs3ParetoRandomVariable__PythonHelper : public ns3::ParetoRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ParetoRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::TimeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeChecker;


extern PyTypeObject *_PyNs3TimeChecker_Type;
#define PyNs3TimeChecker_Type (*_PyNs3TimeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject *_PyNs3Vector2DChecker_Type;
#define PyNs3Vector2DChecker_Type (*_PyNs3Vector2DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject *_PyNs3Vector2DValue_Type;
#define PyNs3Vector2DValue_Type (*_PyNs3Vector2DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject *_PyNs3Vector3DChecker_Type;
#define PyNs3Vector3DChecker_Type (*_PyNs3Vector3DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject *_PyNs3Vector3DValue_Type;
#define PyNs3Vector3DValue_Type (*_PyNs3Vector3DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject *_PyNs3AddressChecker_Type;
#define PyNs3AddressChecker_Type (*_PyNs3AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject *_PyNs3AddressValue_Type;
#define PyNs3AddressValue_Type (*_PyNs3AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AthstatsHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AthstatsHelper;


extern PyTypeObject PyNs3AthstatsHelper_Type;

extern std::map<void*, PyObject*> PyNs3AthstatsHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Bar *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Bar;


extern PyTypeObject PyNs3Bar_Type;

extern std::map<void*, PyObject*> PyNs3Bar_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BlockAckAgreement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckAgreement;


extern PyTypeObject PyNs3BlockAckAgreement_Type;

extern std::map<void*, PyObject*> PyNs3BlockAckAgreement_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BlockAckCache *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckCache;


extern PyTypeObject PyNs3BlockAckCache_Type;

extern std::map<void*, PyObject*> PyNs3BlockAckCache_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BlockAckManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckManager;


extern PyTypeObject PyNs3BlockAckManager_Type;

extern std::map<void*, PyObject*> PyNs3BlockAckManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CapabilityInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CapabilityInformation;


extern PyTypeObject PyNs3CapabilityInformation_Type;

extern std::map<void*, PyObject*> PyNs3CapabilityInformation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DcfManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DcfManager;


extern PyTypeObject PyNs3DcfManager_Type;

extern std::map<void*, PyObject*> PyNs3DcfManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DcfState *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DcfState;


extern PyTypeObject PyNs3DcfState_Type;

class PyNs3DcfState__PythonHelper : public ns3::DcfState
{
public:
    PyObject *m_pyself;
    PyNs3DcfState__PythonHelper(ns3::DcfState const & arg0)
        : ns3::DcfState(arg0), m_pyself(NULL)
        {}

    PyNs3DcfState__PythonHelper()
        : ns3::DcfState(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DcfState__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void DoNotifyAccessGranted();

    virtual void DoNotifyChannelSwitching();

    virtual void DoNotifyCollision();

    virtual void DoNotifyInternalCollision();
};

extern std::map<void*, PyObject*> PyNs3DcfState_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DsssErrorRateModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsssErrorRateModel;


extern PyTypeObject PyNs3DsssErrorRateModel_Type;

extern std::map<void*, PyObject*> PyNs3DsssErrorRateModel_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelper;


extern PyTypeObject PyNs3InterferenceHelper_Type;

extern std::map<void*, PyObject*> PyNs3InterferenceHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper::SnrPer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelperSnrPer;


extern PyTypeObject PyNs3InterferenceHelperSnrPer_Type;

extern std::map<void*, PyObject*> PyNs3InterferenceHelperSnrPer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacLowBlockAckEventListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowBlockAckEventListener;


extern PyTypeObject PyNs3MacLowBlockAckEventListener_Type;

class PyNs3MacLowBlockAckEventListener__PythonHelper : public ns3::MacLowBlockAckEventListener
{
public:
    PyObject *m_pyself;
    PyNs3MacLowBlockAckEventListener__PythonHelper(ns3::MacLowBlockAckEventListener const & arg0)
        : ns3::MacLowBlockAckEventListener(arg0), m_pyself(NULL)
        {}

    PyNs3MacLowBlockAckEventListener__PythonHelper()
        : ns3::MacLowBlockAckEventListener(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLowBlockAckEventListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void BlockAckInactivityTimeout(ns3::Mac48Address originator, uint8_t tid);
};

extern std::map<void*, PyObject*> PyNs3MacLowBlockAckEventListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacLowDcfListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowDcfListener;


extern PyTypeObject PyNs3MacLowDcfListener_Type;

class PyNs3MacLowDcfListener__PythonHelper : public ns3::MacLowDcfListener
{
public:
    PyObject *m_pyself;
    PyNs3MacLowDcfListener__PythonHelper(ns3::MacLowDcfListener const & arg0)
        : ns3::MacLowDcfListener(arg0), m_pyself(NULL)
        {}

    PyNs3MacLowDcfListener__PythonHelper()
        : ns3::MacLowDcfListener(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLowDcfListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void AckTimeoutReset();

    virtual void AckTimeoutStart(ns3::Time duration);

    virtual void CtsTimeoutReset();

    virtual void CtsTimeoutStart(ns3::Time duration);

    virtual void NavReset(ns3::Time duration);

    virtual void NavStart(ns3::Time duration);
};

extern std::map<void*, PyObject*> PyNs3MacLowDcfListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacLowTransmissionListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowTransmissionListener;


extern PyTypeObject PyNs3MacLowTransmissionListener_Type;

class PyNs3MacLowTransmissionListener__PythonHelper : public ns3::MacLowTransmissionListener
{
public:
    PyObject *m_pyself;
    PyNs3MacLowTransmissionListener__PythonHelper(ns3::MacLowTransmissionListener const & arg0)
        : ns3::MacLowTransmissionListener(arg0), m_pyself(NULL)
        {}

    PyNs3MacLowTransmissionListener__PythonHelper()
        : ns3::MacLowTransmissionListener(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLowTransmissionListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void Cancel();

    virtual void GotAck(double snr, ns3::WifiMode txMode);

    virtual void GotBlockAck(ns3::CtrlBAckResponseHeader const *blockAck, ns3::Mac48Address source);

    virtual void GotCts(double snr, ns3::WifiMode txMode);

    virtual void MissedAck();

    virtual void MissedBlockAck();

    virtual void MissedCts();

    virtual void StartNext();
};

extern std::map<void*, PyObject*> PyNs3MacLowTransmissionListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacLowTransmissionParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowTransmissionParameters;


extern PyTypeObject PyNs3MacLowTransmissionParameters_Type;

extern std::map<void*, PyObject*> PyNs3MacLowTransmissionParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacRxMiddle *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacRxMiddle;


extern PyTypeObject PyNs3MacRxMiddle_Type;

extern std::map<void*, PyObject*> PyNs3MacRxMiddle_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::OriginatorBlockAckAgreement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OriginatorBlockAckAgreement;


extern PyTypeObject PyNs3OriginatorBlockAckAgreement_Type;


typedef struct {
    PyObject_HEAD
    ns3::RateInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RateInfo;


extern PyTypeObject PyNs3RateInfo_Type;

extern std::map<void*, PyObject*> PyNs3RateInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::StatusCode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StatusCode;


extern PyTypeObject PyNs3StatusCode_Type;

extern std::map<void*, PyObject*> PyNs3StatusCode_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiHelper;


extern PyTypeObject PyNs3WifiHelper_Type;

extern std::map<void*, PyObject*> PyNs3WifiHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacHelper;


extern PyTypeObject PyNs3WifiMacHelper_Type;

class PyNs3WifiMacHelper__PythonHelper : public ns3::WifiMacHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiMacHelper__PythonHelper()
        : ns3::WifiMacHelper(), m_pyself(NULL)
        {}

    PyNs3WifiMacHelper__PythonHelper(ns3::WifiMacHelper const & arg0)
        : ns3::WifiMacHelper(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiMac > Create() const;
};

extern std::map<void*, PyObject*> PyNs3WifiMacHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiMode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMode;


extern PyTypeObject PyNs3WifiMode_Type;

extern std::map<void*, PyObject*> PyNs3WifiMode_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiModeFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeFactory;


extern PyTypeObject PyNs3WifiModeFactory_Type;

extern std::map<void*, PyObject*> PyNs3WifiModeFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiPhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyHelper;


extern PyTypeObject PyNs3WifiPhyHelper_Type;

class PyNs3WifiPhyHelper__PythonHelper : public ns3::WifiPhyHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiPhyHelper__PythonHelper()
        : ns3::WifiPhyHelper(), m_pyself(NULL)
        {}

    PyNs3WifiPhyHelper__PythonHelper(ns3::WifiPhyHelper const & arg0)
        : ns3::WifiPhyHelper(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiPhy > Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::WifiNetDevice > device) const;
};

extern std::map<void*, PyObject*> PyNs3WifiPhyHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiPhyListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyListener;


extern PyTypeObject PyNs3WifiPhyListener_Type;

class PyNs3WifiPhyListener__PythonHelper : public ns3::WifiPhyListener
{
public:
    PyObject *m_pyself;
    PyNs3WifiPhyListener__PythonHelper()
        : ns3::WifiPhyListener(), m_pyself(NULL)
        {}

    PyNs3WifiPhyListener__PythonHelper(ns3::WifiPhyListener const & arg0)
        : ns3::WifiPhyListener(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhyListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void NotifyMaybeCcaBusyStart(ns3::Time duration);

    virtual void NotifyRxEndError();

    virtual void NotifyRxEndOk();

    virtual void NotifyRxStart(ns3::Time duration);

    virtual void NotifySwitchingStart(ns3::Time duration);

    virtual void NotifyTxStart(ns3::Time duration);
};

extern std::map<void*, PyObject*> PyNs3WifiPhyListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStation;


extern PyTypeObject PyNs3WifiRemoteStation_Type;

extern std::map<void*, PyObject*> PyNs3WifiRemoteStation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationInfo;


extern PyTypeObject PyNs3WifiRemoteStationInfo_Type;

extern std::map<void*, PyObject*> PyNs3WifiRemoteStationInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationState *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationState;


extern PyTypeObject PyNs3WifiRemoteStationState_Type;

extern std::map<void*, PyObject*> PyNs3WifiRemoteStationState_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::YansWifiChannelHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiChannelHelper;


extern PyTypeObject PyNs3YansWifiChannelHelper_Type;

extern std::map<void*, PyObject*> PyNs3YansWifiChannelHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::YansWifiPhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiPhyHelper;


extern PyTypeObject PyNs3YansWifiPhyHelper_Type;

class PyNs3YansWifiPhyHelper__PythonHelper : public ns3::YansWifiPhyHelper
{
public:
    PyObject *m_pyself;
    PyNs3YansWifiPhyHelper__PythonHelper(ns3::YansWifiPhyHelper const & arg0)
        : ns3::YansWifiPhyHelper(arg0), m_pyself(NULL)
        {}

    PyNs3YansWifiPhyHelper__PythonHelper()
        : ns3::YansWifiPhyHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWifiPhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiPhy > Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::WifiNetDevice > device) const;

    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);

    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename);
};


typedef struct {
    PyObject_HEAD
    ns3::MgtAddBaRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAddBaRequestHeader;


extern PyTypeObject PyNs3MgtAddBaRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtAddBaResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAddBaResponseHeader;


extern PyTypeObject PyNs3MgtAddBaResponseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtAssocRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAssocRequestHeader;


extern PyTypeObject PyNs3MgtAssocRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtAssocResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAssocResponseHeader;


extern PyTypeObject PyNs3MgtAssocResponseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtDelBaHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtDelBaHeader;


extern PyTypeObject PyNs3MgtDelBaHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtProbeRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtProbeRequestHeader;


extern PyTypeObject PyNs3MgtProbeRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MgtProbeResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtProbeResponseHeader;


extern PyTypeObject PyNs3MgtProbeResponseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::NqosWifiMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NqosWifiMacHelper;


extern PyTypeObject PyNs3NqosWifiMacHelper_Type;

class PyNs3NqosWifiMacHelper__PythonHelper : public ns3::NqosWifiMacHelper
{
public:
    PyObject *m_pyself;
    PyNs3NqosWifiMacHelper__PythonHelper(ns3::NqosWifiMacHelper const & arg0)
        : ns3::NqosWifiMacHelper(arg0), m_pyself(NULL)
        {}

    PyNs3NqosWifiMacHelper__PythonHelper()
        : ns3::NqosWifiMacHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NqosWifiMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiMac > Create() const;
};


typedef struct {
    PyObject_HEAD
    ns3::QosTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QosTag;


extern PyTypeObject PyNs3QosTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::QosWifiMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QosWifiMacHelper;


extern PyTypeObject PyNs3QosWifiMacHelper_Type;

class PyNs3QosWifiMacHelper__PythonHelper : public ns3::QosWifiMacHelper
{
public:
    PyObject *m_pyself;
    PyNs3QosWifiMacHelper__PythonHelper(ns3::QosWifiMacHelper const & arg0)
        : ns3::QosWifiMacHelper(arg0), m_pyself(NULL)
        {}

    PyNs3QosWifiMacHelper__PythonHelper()
        : ns3::QosWifiMacHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QosWifiMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiMac > Create() const;
};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::WifiActionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiActionHeader;


extern PyTypeObject PyNs3WifiActionHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiActionHeader::ActionValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiActionHeaderActionValue;


extern PyTypeObject PyNs3WifiActionHeaderActionValue_Type;

extern std::map<void*, PyObject*> PyNs3WifiActionHeaderActionValue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiInformationElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiInformationElement;


extern PyTypeObject PyNs3WifiInformationElement_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiInformationElementVector *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiInformationElementVector;


extern PyTypeObject PyNs3WifiInformationElementVector_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMac;


extern PyTypeObject PyNs3WifiMac_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiMacHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacHeader;


extern PyTypeObject PyNs3WifiMacHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiMacQueue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacQueue;


extern PyTypeObject PyNs3WifiMacQueue_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhy;


extern PyTypeObject PyNs3WifiPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationManager;


extern PyTypeObject PyNs3WifiRemoteStationManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::YansWifiPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiPhy;


extern PyTypeObject PyNs3YansWifiPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::AarfWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AarfWifiManager;


extern PyTypeObject PyNs3AarfWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AarfcdWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AarfcdWifiManager;


extern PyTypeObject PyNs3AarfcdWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AmrrWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmrrWifiManager;


extern PyTypeObject PyNs3AmrrWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AmsduSubframeHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmsduSubframeHeader;


extern PyTypeObject PyNs3AmsduSubframeHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::ArfWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArfWifiManager;


extern PyTypeObject PyNs3ArfWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AthstatsWifiTraceSink *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AthstatsWifiTraceSink;


extern PyTypeObject PyNs3AthstatsWifiTraceSink_Type;


typedef struct {
    PyObject_HEAD
    ns3::CaraWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CaraWifiManager;


extern PyTypeObject PyNs3CaraWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::ConstantRateWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRateWifiManager;


extern PyTypeObject PyNs3ConstantRateWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::CtrlBAckRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CtrlBAckRequestHeader;


extern PyTypeObject PyNs3CtrlBAckRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::CtrlBAckResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CtrlBAckResponseHeader;


extern PyTypeObject PyNs3CtrlBAckResponseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Dcf *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dcf;


extern PyTypeObject PyNs3Dcf_Type;

class PyNs3Dcf__PythonHelper : public ns3::Dcf
{
public:
    PyObject *m_pyself;
    PyNs3Dcf__PythonHelper()
        : ns3::Dcf(), m_pyself(NULL)
        {}

    PyNs3Dcf__PythonHelper(ns3::Dcf const & arg0)
        : ns3::Dcf(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Dcf__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Dcf *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Dcf *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Dcf *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Dcf *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual uint32_t GetAifsn() const;

    virtual uint32_t GetMaxCw() const;

    virtual uint32_t GetMinCw() const;

    virtual void SetAifsn(uint32_t aifsn);

    virtual void SetMaxCw(uint32_t maxCw);

    virtual void SetMinCw(uint32_t minCw);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Dcf__PythonHelper")
        .SetParent< ns3::Dcf > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Dcf__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EdcaTxopN *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EdcaTxopN;


extern PyTypeObject PyNs3EdcaTxopN_Type;

class PyNs3EdcaTxopN__PythonHelper : public ns3::EdcaTxopN
{
public:
    PyObject *m_pyself;
    PyNs3EdcaTxopN__PythonHelper()
        : ns3::EdcaTxopN(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EdcaTxopN__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EdcaTxopN *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EdcaTxopN *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void SetMinCw(uint32_t minCw);

    virtual void SetMaxCw(uint32_t maxCw);

    virtual void SetAifsn(uint32_t aifsn);

    virtual uint32_t GetMinCw() const;

    virtual uint32_t GetMaxCw() const;

    virtual uint32_t GetAifsn() const;

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EdcaTxopN__PythonHelper")
        .SetParent< ns3::EdcaTxopN > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EdcaTxopN__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErrorRateModel;


extern PyTypeObject PyNs3ErrorRateModel_Type;

class PyNs3ErrorRateModel__PythonHelper : public ns3::ErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3ErrorRateModel__PythonHelper()
        : ns3::ErrorRateModel(), m_pyself(NULL)
        {}

    PyNs3ErrorRateModel__PythonHelper(ns3::ErrorRateModel const & arg0)
        : ns3::ErrorRateModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ErrorRateModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ErrorRateModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ErrorRateModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ErrorRateModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetChunkSuccessRate(ns3::WifiMode mode, double snr, uint32_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ErrorRateModel__PythonHelper")
        .SetParent< ns3::ErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ExtendedSupportedRatesIE *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExtendedSupportedRatesIE;


extern PyTypeObject PyNs3ExtendedSupportedRatesIE_Type;


typedef struct {
    PyObject_HEAD
    ns3::IdealWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3IdealWifiManager;


extern PyTypeObject PyNs3IdealWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::MacLow *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLow;


extern PyTypeObject PyNs3MacLow_Type;

class PyNs3MacLow__PythonHelper : public ns3::MacLow
{
public:
    PyObject *m_pyself;
    PyNs3MacLow__PythonHelper(ns3::MacLow const & arg0)
        : ns3::MacLow(arg0), m_pyself(NULL)
        {}

    PyNs3MacLow__PythonHelper()
        : ns3::MacLow(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLow__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MacLow *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MacLow *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3MacLow *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MacLow__PythonHelper")
        .SetParent< ns3::MacLow > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MacLow__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MgtBeaconHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtBeaconHeader;


extern PyTypeObject PyNs3MgtBeaconHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MinstrelWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MinstrelWifiManager;


extern PyTypeObject PyNs3MinstrelWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::MsduAggregator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MsduAggregator;


extern PyTypeObject PyNs3MsduAggregator_Type;

class PyNs3MsduAggregator__PythonHelper : public ns3::MsduAggregator
{
public:
    PyObject *m_pyself;
    PyNs3MsduAggregator__PythonHelper()
        : ns3::MsduAggregator(), m_pyself(NULL)
        {}

    PyNs3MsduAggregator__PythonHelper(ns3::MsduAggregator const & arg0)
        : ns3::MsduAggregator(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MsduAggregator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MsduAggregator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MsduAggregator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3MsduAggregator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3MsduAggregator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool Aggregate(ns3::Ptr< ns3::Packet const > packet, ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::Mac48Address src, ns3::Mac48Address dest);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MsduAggregator__PythonHelper")
        .SetParent< ns3::MsduAggregator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MsduAggregator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NistErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NistErrorRateModel;


extern PyTypeObject PyNs3NistErrorRateModel_Type;

class PyNs3NistErrorRateModel__PythonHelper : public ns3::NistErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3NistErrorRateModel__PythonHelper(ns3::NistErrorRateModel const & arg0)
        : ns3::NistErrorRateModel(arg0), m_pyself(NULL)
        {}

    PyNs3NistErrorRateModel__PythonHelper()
        : ns3::NistErrorRateModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NistErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NistErrorRateModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NistErrorRateModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3NistErrorRateModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3NistErrorRateModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetChunkSuccessRate(ns3::WifiMode mode, double snr, uint32_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NistErrorRateModel__PythonHelper")
        .SetParent< ns3::NistErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NistErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::OnoeWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OnoeWifiManager;


extern PyTypeObject PyNs3OnoeWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::RegularWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RegularWifiMac;


extern PyTypeObject PyNs3RegularWifiMac_Type;

class PyNs3RegularWifiMac__PythonHelper : public ns3::RegularWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3RegularWifiMac__PythonHelper()
        : ns3::RegularWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RegularWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RegularWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_ForwardUp(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void ForwardUp__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address from, ns3::Mac48Address to)
    { ns3::RegularWifiMac::ForwardUp(packet, from, to); }

    static PyObject * _wrap_TxOk(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxOk__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxOk(hdr); }

    static PyObject * _wrap_Receive(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void Receive__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr)
    { ns3::RegularWifiMac::Receive(packet, hdr); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RegularWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_SetQosSupported(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SetQosSupported__parent_caller(bool enable)
    { ns3::RegularWifiMac::SetQosSupported(enable); }

    static PyObject * _wrap_DoStart(PyNs3RegularWifiMac *self);
    inline void DoStart__parent_caller()
    { ns3::RegularWifiMac::DoStart(); }

    static PyObject * _wrap_SendAddBaResponse(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SendAddBaResponse__parent_caller(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator)
    { ns3::RegularWifiMac::SendAddBaResponse(reqHdr, originator); }

    static PyObject * _wrap_TxFailed(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxFailed__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxFailed(hdr); }

    static PyObject * _wrap_SetTypeOfStation(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SetTypeOfStation__parent_caller(ns3::TypeOfStation type)
    { ns3::RegularWifiMac::SetTypeOfStation(type); }

    static PyObject * _wrap_DoDispose(PyNs3RegularWifiMac *self);
    inline void DoDispose__parent_caller()
    { ns3::RegularWifiMac::DoDispose(); }

    static PyObject * _wrap_GetQosSupported(PyNs3RegularWifiMac *self);
    inline bool GetQosSupported__parent_caller()
    { return ns3::RegularWifiMac::GetQosSupported(); }

    static PyObject * _wrap_DeaggregateAmsduAndForward(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr)
    { ns3::RegularWifiMac::DeaggregateAmsduAndForward(aggregatedPacket, hdr); }

    static PyObject * _wrap_FinishConfigureStandard(PyNs3RegularWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void FinishConfigureStandard__parent_caller(ns3::WifiPhyStandard standard)
    { ns3::RegularWifiMac::FinishConfigureStandard(standard); }

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual void SetPifs(ns3::Time pifs);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual ns3::Time GetPifs() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Time GetSlot() const;

    virtual ns3::Time GetEifsNoDifs() const;

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Ssid GetSsid() const;

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual void SetBssid(ns3::Mac48Address bssid);

    virtual ns3::Mac48Address GetBssid() const;

    virtual void SetPromisc();

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual bool SupportsSendFrom() const;

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual void DoStart();

    virtual void DoDispose();

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual void Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr);

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr);

    virtual void SendAddBaResponse(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RegularWifiMac__PythonHelper")
        .SetParent< ns3::RegularWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RegularWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RraaWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RraaWifiManager;


extern PyTypeObject PyNs3RraaWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ssid *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ssid;


extern PyTypeObject PyNs3Ssid_Type;


typedef struct {
    PyObject_HEAD
    ns3::SsidChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SsidChecker;


extern PyTypeObject PyNs3SsidChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::SsidValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SsidValue;


extern PyTypeObject PyNs3SsidValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::StaWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3StaWifiMac;


extern PyTypeObject PyNs3StaWifiMac_Type;

class PyNs3StaWifiMac__PythonHelper : public ns3::StaWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3StaWifiMac__PythonHelper()
        : ns3::StaWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3StaWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3StaWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_TxOk(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxOk__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxOk(hdr); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3StaWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3StaWifiMac *self);
    inline void DoStart__parent_caller()
    { ns3::RegularWifiMac::DoStart(); }

    static PyObject * _wrap_SendAddBaResponse(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SendAddBaResponse__parent_caller(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator)
    { ns3::RegularWifiMac::SendAddBaResponse(reqHdr, originator); }

    static PyObject * _wrap_TxFailed(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxFailed__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxFailed(hdr); }

    static PyObject * _wrap_DoDispose(PyNs3StaWifiMac *self);
    inline void DoDispose__parent_caller()
    { ns3::RegularWifiMac::DoDispose(); }

    static PyObject * _wrap_DeaggregateAmsduAndForward(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr)
    { ns3::RegularWifiMac::DeaggregateAmsduAndForward(aggregatedPacket, hdr); }

    static PyObject * _wrap_FinishConfigureStandard(PyNs3StaWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void FinishConfigureStandard__parent_caller(ns3::WifiPhyStandard standard)
    { ns3::RegularWifiMac::FinishConfigureStandard(standard); }

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual void Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr);

    virtual void SetBssid(ns3::Mac48Address bssid);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual ns3::Mac48Address GetBssid() const;

    virtual bool SupportsSendFrom() const;

    virtual void SetPifs(ns3::Time pifs);

    virtual ns3::Time GetEifsNoDifs() const;

    virtual void SetPromisc();

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual ns3::Time GetPifs() const;

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Time GetSlot() const;

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual ns3::Ssid GetSsid() const;

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void DoStart();

    virtual void DoDispose();

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr);

    virtual void SendAddBaResponse(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3StaWifiMac__PythonHelper")
        .SetParent< ns3::StaWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3StaWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SupportedRates *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SupportedRates;


extern PyTypeObject PyNs3SupportedRates_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiChannel;


extern PyTypeObject PyNs3WifiChannel_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiModeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeChecker;


extern PyTypeObject PyNs3WifiModeChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiModeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeValue;


extern PyTypeObject PyNs3WifiModeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiNetDevice;


extern PyTypeObject PyNs3WifiNetDevice_Type;

class PyNs3WifiNetDevice__PythonHelper : public ns3::WifiNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3WifiNetDevice__PythonHelper(ns3::WifiNetDevice const & arg0)
        : ns3::WifiNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3WifiNetDevice__PythonHelper()
        : ns3::WifiNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiNetDevice__PythonHelper")
        .SetParent< ns3::WifiNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::YansErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansErrorRateModel;


extern PyTypeObject PyNs3YansErrorRateModel_Type;

class PyNs3YansErrorRateModel__PythonHelper : public ns3::YansErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3YansErrorRateModel__PythonHelper(ns3::YansErrorRateModel const & arg0)
        : ns3::YansErrorRateModel(arg0), m_pyself(NULL)
        {}

    PyNs3YansErrorRateModel__PythonHelper()
        : ns3::YansErrorRateModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3YansErrorRateModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3YansErrorRateModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3YansErrorRateModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3YansErrorRateModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetChunkSuccessRate(ns3::WifiMode mode, double snr, uint32_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3YansErrorRateModel__PythonHelper")
        .SetParent< ns3::YansErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3YansErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::YansWifiChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiChannel;


extern PyTypeObject PyNs3YansWifiChannel_Type;

class PyNs3YansWifiChannel__PythonHelper : public ns3::YansWifiChannel
{
public:
    PyObject *m_pyself;
    PyNs3YansWifiChannel__PythonHelper()
        : ns3::YansWifiChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWifiChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3YansWifiChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3YansWifiChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3YansWifiChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3YansWifiChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual uint32_t GetNDevices() const;

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3YansWifiChannel__PythonHelper")
        .SetParent< ns3::YansWifiChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3YansWifiChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AdhocWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AdhocWifiMac;


extern PyTypeObject PyNs3AdhocWifiMac_Type;

class PyNs3AdhocWifiMac__PythonHelper : public ns3::AdhocWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3AdhocWifiMac__PythonHelper()
        : ns3::AdhocWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AdhocWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AdhocWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_TxOk(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxOk__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxOk(hdr); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3AdhocWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3AdhocWifiMac *self);
    inline void DoStart__parent_caller()
    { ns3::RegularWifiMac::DoStart(); }

    static PyObject * _wrap_SendAddBaResponse(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SendAddBaResponse__parent_caller(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator)
    { ns3::RegularWifiMac::SendAddBaResponse(reqHdr, originator); }

    static PyObject * _wrap_TxFailed(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void TxFailed__parent_caller(ns3::WifiMacHeader const & hdr)
    { ns3::RegularWifiMac::TxFailed(hdr); }

    static PyObject * _wrap_DoDispose(PyNs3AdhocWifiMac *self);
    inline void DoDispose__parent_caller()
    { ns3::RegularWifiMac::DoDispose(); }

    static PyObject * _wrap_DeaggregateAmsduAndForward(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr)
    { ns3::RegularWifiMac::DeaggregateAmsduAndForward(aggregatedPacket, hdr); }

    static PyObject * _wrap_FinishConfigureStandard(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void FinishConfigureStandard__parent_caller(ns3::WifiPhyStandard standard)
    { ns3::RegularWifiMac::FinishConfigureStandard(standard); }

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual void Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr);

    virtual void SetBssid(ns3::Mac48Address bssid);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual ns3::Mac48Address GetBssid() const;

    virtual bool SupportsSendFrom() const;

    virtual void SetPifs(ns3::Time pifs);

    virtual ns3::Time GetEifsNoDifs() const;

    virtual void SetPromisc();

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual ns3::Time GetPifs() const;

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Time GetSlot() const;

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual ns3::Ssid GetSsid() const;

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void DoStart();

    virtual void DoDispose();

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr);

    virtual void SendAddBaResponse(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3AdhocWifiMac__PythonHelper")
        .SetParent< ns3::AdhocWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3AdhocWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ApWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ApWifiMac;


extern PyTypeObject PyNs3ApWifiMac_Type;

class PyNs3ApWifiMac__PythonHelper : public ns3::ApWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3ApWifiMac__PythonHelper()
        : ns3::ApWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ApWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_SendAddBaResponse(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void SendAddBaResponse__parent_caller(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator)
    { ns3::RegularWifiMac::SendAddBaResponse(reqHdr, originator); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ApWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ApWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_FinishConfigureStandard(PyNs3ApWifiMac *self, PyObject *args, PyObject *kwargs);
    inline void FinishConfigureStandard__parent_caller(ns3::WifiPhyStandard standard)
    { ns3::RegularWifiMac::FinishConfigureStandard(standard); }

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual bool SupportsSendFrom() const;

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr);

    virtual void TxOk(ns3::WifiMacHeader const & hdr);

    virtual void TxFailed(ns3::WifiMacHeader const & hdr);

    virtual void DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr);

    virtual void DoDispose();

    virtual void DoStart();

    virtual void SetBssid(ns3::Mac48Address bssid);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual ns3::Mac48Address GetBssid() const;

    virtual void SetPifs(ns3::Time pifs);

    virtual ns3::Time GetEifsNoDifs() const;

    virtual void SetPromisc();

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual ns3::Time GetPifs() const;

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Ptr< ns3::WifiPhy > GetWifiPhy() const;

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Time GetSlot() const;

    virtual void SetSifs(ns3::Time sifs);

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual ns3::Ssid GetSsid() const;

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Ptr< ns3::WifiRemoteStationManager > GetWifiRemoteStationManager() const;

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual void SendAddBaResponse(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ApWifiMac__PythonHelper")
        .SetParent< ns3::ApWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ApWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DcaTxop *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DcaTxop;


extern PyTypeObject PyNs3DcaTxop_Type;

class PyNs3DcaTxop__PythonHelper : public ns3::DcaTxop
{
public:
    PyObject *m_pyself;
    PyNs3DcaTxop__PythonHelper()
        : ns3::DcaTxop(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DcaTxop__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DcaTxop *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DcaTxop *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void SetMinCw(uint32_t minCw);

    virtual void SetMaxCw(uint32_t maxCw);

    virtual void SetAifsn(uint32_t aifsn);

    virtual uint32_t GetMinCw() const;

    virtual uint32_t GetMaxCw() const;

    virtual uint32_t GetAifsn() const;

    virtual void DoStart();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DcaTxop__PythonHelper")
        .SetParent< ns3::DcaTxop > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DcaTxop__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WifiModeList *obj;
} Pyns3__WifiModeList;


typedef struct {
    PyObject_HEAD
    Pyns3__WifiModeList *container;
    ns3::WifiModeList::iterator *iterator;
} Pyns3__WifiModeListIter;


extern PyTypeObject Pyns3__WifiModeList_Type;
extern PyTypeObject Pyns3__WifiModeListIter_Type;

int _wrap_convert_py2c__ns3__WifiModeList(PyObject *arg, ns3::WifiModeList *container);

class PythonCallbackImpl0 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNiN)", py_NetDevice, py_Packet, (int) arg3, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::WifiMacHeader const*, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, ns3::WifiMacHeader const *arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiMacHeader *py_WifiMacHeader;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) arg2);
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiMacHeader = NULL;
        } else {
            py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
            Py_INCREF(py_WifiMacHeader);
        }

        if (py_WifiMacHeader == NULL)
        {
            py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
            py_WifiMacHeader->inst_dict = NULL;
            py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            py_WifiMacHeader->obj = new ns3::WifiMacHeader(*arg2);
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
        }
        args = Py_BuildValue((char *) "(NN)", py_Packet, py_WifiMacHeader);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl5 : public ns3::CallbackImpl<void, ns3::WifiMacHeader const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl5(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl5()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl5 *other = dynamic_cast<const PythonCallbackImpl5*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::WifiMacHeader const & arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiMacHeader *py_WifiMacHeader;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
        args = Py_BuildValue((char *) "(N)", py_WifiMacHeader);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, ns3::Mac48Address arg2, ns3::Mac48Address arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Mac48Address *py_Mac48Address;
        PyNs3Mac48Address *py_Mac48Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address2->obj = new ns3::Mac48Address(arg3);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
        args = Py_BuildValue((char *) "(NNN)", py_Packet, py_Mac48Address, py_Mac48Address2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl7 : public ns3::CallbackImpl<void, ns3::Mac48Address, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl7(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl7()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl7 *other = dynamic_cast<const PythonCallbackImpl7*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Mac48Address arg1, unsigned char arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(Ni)", py_Mac48Address, (int) arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl8 : public ns3::CallbackImpl<void, ns3::Mac48Address, unsigned char, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl8(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl8()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl8 *other = dynamic_cast<const PythonCallbackImpl8*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Mac48Address arg1, unsigned char arg2, bool arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        args = Py_BuildValue((char *) "(NiN)", py_Mac48Address, (int) arg2, PyBool_FromLong(arg3));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


int _wrap_convert_py2c__ns3__WifiMode(PyObject *value, ns3::WifiMode *address);

